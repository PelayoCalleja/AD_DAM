/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaz;

import java.io.File;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import logica.UtilidadDeDiscos;

/**
 *
 * @author Pelayo
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private UtilidadDeDiscos ud;

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        ud = new UtilidadDeDiscos();
        initComponents();
        jTextFieldFicheroSeleccionado.setText(ud.getPathSeleccionado());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSeleccionarFichero = new javax.swing.JButton();
        jTextFieldFicheroSeleccionado = new javax.swing.JTextField();
        jLabelEspacioLibre = new javax.swing.JLabel();
        jTextFieldEspacioLibre = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButtonEliminarDirectorios = new javax.swing.JButton();
        jButtonEliminarPDF = new javax.swing.JButton();
        jButtonEliminarDirectoriosGrandes = new javax.swing.JButton();
        jButtonContarNumeroArchivos = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButtonEliminarCualquierArchivo = new javax.swing.JButton();
        jButtonBorrarRecursivo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonSeleccionarFichero.setText("SELECCIONAR FICHERO");
        jButtonSeleccionarFichero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSeleccionarFicheroActionPerformed(evt);
            }
        });

        jTextFieldFicheroSeleccionado.setEditable(false);

        jLabelEspacioLibre.setText("El espacio libre es :");

        jTextFieldEspacioLibre.setEditable(false);

        jLabel1.setText("Directorio actual es :");

        jButtonEliminarDirectorios.setText("Eliminar directorios vacios");
        jButtonEliminarDirectorios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarDirectoriosActionPerformed(evt);
            }
        });

        jButtonEliminarPDF.setText("Eliminar archivos PDF");
        jButtonEliminarPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarPDFActionPerformed(evt);
            }
        });

        jButtonEliminarDirectoriosGrandes.setText("Eliminar directorios grandes");
        jButtonEliminarDirectoriosGrandes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarDirectoriosGrandesActionPerformed(evt);
            }
        });

        jButtonContarNumeroArchivos.setText("Contar n√∫mero de archivos de un tipo");
        jButtonContarNumeroArchivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonContarNumeroArchivosActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("LIMPIEZA DE DISCOS");
        jLabel2.setAlignmentY(0.0F);

        jButtonEliminarCualquierArchivo.setText("Eliminar cualquier tipo de archivo");
        jButtonEliminarCualquierArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarCualquierArchivoActionPerformed(evt);
            }
        });

        jButtonBorrarRecursivo.setText("Borrar carpeta recursivamente");
        jButtonBorrarRecursivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBorrarRecursivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldFicheroSeleccionado)
                    .addComponent(jLabelEspacioLibre, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                    .addComponent(jButtonSeleccionarFichero, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonContarNumeroArchivos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonEliminarDirectoriosGrandes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonEliminarPDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonEliminarDirectorios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldEspacioLibre)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonEliminarCualquierArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonBorrarRecursivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldFicheroSeleccionado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSeleccionarFichero, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelEspacioLibre)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldEspacioLibre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonEliminarDirectorios)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEliminarPDF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEliminarDirectoriosGrandes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonContarNumeroArchivos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEliminarCualquierArchivo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonBorrarRecursivo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSeleccionarFicheroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSeleccionarFicheroActionPerformed
        VentanaSeleccion vs = new VentanaSeleccion(ud, this);
        vs.setVisible(true);
    }//GEN-LAST:event_jButtonSeleccionarFicheroActionPerformed

    private void jButtonEliminarDirectoriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarDirectoriosActionPerformed
        ArrayList<String> nombres = ud.eliminarDirectoriosVacios(jTextFieldFicheroSeleccionado.getText());
        if (nombres == null) {
            JOptionPane.showMessageDialog(this, "El directorio que has seleccionado no existe");
        } else {
            int borrados = nombres.size();
            String cadena = "Los directorios vacios han sido borrados correctamente:\n";
            if (borrados > 0) {
                for (String s : nombres) {
                    cadena += s + "\n";
                }
                JOptionPane.showMessageDialog(this, cadena);
            } else {
                JOptionPane.showMessageDialog(this, "No se ha borrado nada porque no habia directorios vac√≠os");

            }

        }
    }//GEN-LAST:event_jButtonEliminarDirectoriosActionPerformed

    private void jButtonEliminarPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarPDFActionPerformed
        ArrayList<String> nombres = ud.eliminarFicherosPDF(jTextFieldFicheroSeleccionado.getText());
        int borrados = nombres.size();
        if (borrados > 0) {

            String cadena = "Los archivos PDF han sido borrados correctamente:\n";
            if (borrados > 0) {
                for (String s : nombres) {
                    cadena += s + "\n";
                }
                JOptionPane.showMessageDialog(this, cadena);
            } else {
                JOptionPane.showMessageDialog(this, "No se ha borrado nada porque no habia archivos pdf");

            }
        }

    }//GEN-LAST:event_jButtonEliminarPDFActionPerformed

    private void jButtonEliminarDirectoriosGrandesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarDirectoriosGrandesActionPerformed
        String valor = JOptionPane.showInputDialog(this, "Introduce el tama√±o m√°ximo en bytes");

        try {
            int tam = Integer.valueOf(valor);
            ArrayList<String> nombres = ud.eliminarFicherosGrandes(jTextFieldFicheroSeleccionado.getText(), tam);

            int borrados = nombres.size();
            String cadena = "Los archivos han sido borrados correctamente:\n";
            if (borrados > 0) {
                for (String s : nombres) {
                    cadena += s + "\n";
                }
                JOptionPane.showMessageDialog(this, cadena);
            } else {
                JOptionPane.showMessageDialog(this, "No se ha borrado nada porque no habia archivos ");

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Debes introducir un n√∫mero");

        }


    }//GEN-LAST:event_jButtonEliminarDirectoriosGrandesActionPerformed

    private void jButtonContarNumeroArchivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonContarNumeroArchivosActionPerformed
        
        String ext = JOptionPane.showInputDialog(this, "Introduce el tipo de ficheros que quieres contar. Ejemplo: pdf, jpg, doc...");
        ArrayList<String> nombres = ud.contarFicherosTipo(jTextFieldFicheroSeleccionado.getText(), ext);
        int total = nombres.size();
        if (total > 0) {

            String cadena = "Hay " + total + " ficheros de tipo " + ext + ":\n";
            if (total > 0) {
                for (String s : nombres) {
                    cadena += s + "\n";
                }
                JOptionPane.showMessageDialog(this, cadena);
            } else {
                JOptionPane.showMessageDialog(this, "No hay archivos para contar del tipo " + ext);

            }
        } else {
            JOptionPane.showMessageDialog(this, "Hay " + total + " ficheros de tipo " + ext);
        }


    }//GEN-LAST:event_jButtonContarNumeroArchivosActionPerformed

    private void jButtonEliminarCualquierArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarCualquierArchivoActionPerformed
        String valor = JOptionPane.showInputDialog(this, "Introduce el tipo de archivo");
        ArrayList<String> nombres = ud.eliminarFicherosCualquierTipo(jTextFieldFicheroSeleccionado.getText(), valor);
        int borrados = nombres.size();
        try {

            if (borrados > 0) {

                String cadena = "Los archivos " + valor + " han sido borrados correctamente:\n";
                if (borrados > 0) {
                    for (String s : nombres) {
                        cadena += s + "\n";
                    }
                    JOptionPane.showMessageDialog(this, cadena);
                } else {
                    JOptionPane.showMessageDialog(this, "No se ha borrado nada porque no habia archivos" + valor);

                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Debes introducir un tipo");

        }
    }//GEN-LAST:event_jButtonEliminarCualquierArchivoActionPerformed

    private void jButtonBorrarRecursivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBorrarRecursivoActionPerformed

        ArrayList<String> nombres = ud.eliminarDirectoriosRecursivo(jTextFieldFicheroSeleccionado.getText());
        if (nombres == null) {
            JOptionPane.showMessageDialog(this, "El directorio que has seleccionado no existe");
        } else {
            int borrados = nombres.size();
            String cadena = "Los directorios vacios han sido borrados correctamente:\n";
            if (borrados > 0) {
                for (String s : nombres) {
                    cadena += s + "\n";
                }
                JOptionPane.showMessageDialog(this, cadena);
            } else {
                JOptionPane.showMessageDialog(this, "No se ha borrado nada porque no habia directorios vac√≠os");

            }

        }

    }//GEN-LAST:event_jButtonBorrarRecursivoActionPerformed

    void repintar() {
        File f = new File(ud.getPathSeleccionado());
        jTextFieldFicheroSeleccionado.setText(ud.getPathSeleccionado());
        long freeSpace = f.getUsableSpace();
        freeSpace = freeSpace / (1024 * 1024 * 1024);
        jTextFieldEspacioLibre.setText(String.valueOf(freeSpace) + " Gb");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBorrarRecursivo;
    private javax.swing.JButton jButtonContarNumeroArchivos;
    private javax.swing.JButton jButtonEliminarCualquierArchivo;
    private javax.swing.JButton jButtonEliminarDirectorios;
    private javax.swing.JButton jButtonEliminarDirectoriosGrandes;
    private javax.swing.JButton jButtonEliminarPDF;
    private javax.swing.JButton jButtonSeleccionarFichero;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelEspacioLibre;
    private javax.swing.JTextField jTextFieldEspacioLibre;
    private javax.swing.JTextField jTextFieldFicheroSeleccionado;
    // End of variables declaration//GEN-END:variables
}
